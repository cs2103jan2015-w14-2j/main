//@author: a0121810y



	/**
	 * origin: C:\Users\Gable Heng\Desktop\CS2103\ProjectItinerary\src\itinerary\main\JsonConverter.java
	 */

public class JsonConverter {

    public static <T extends Task> List<String> convertTaskList(List<T> taskList) {
        List<String> json = new ArrayList<String>();
        Gson gson = new Gson();
        for (T task : taskList) {
            json.add(gson.toJson(task));
        }
        return json;
    }

    public static <T extends Task> List<String> getTypeList(List<T> taskList) {
        List<String> list = new ArrayList<String>();
        for (T task : taskList) {
            list.add(task.getClass().toString());
        }
        return list;
    }

    public static <T extends Task> List<T> convertJsonList(List<String> jsonList,
                                                           List<String> typeList) {
        List<T> taskList = new ArrayList<T>();
        Gson gson = new Gson();

        for (int i = 0; i < typeList.size(); i++) {
            String[] taskString = typeList.get(i).replace(".", " ").split(" ");
            String task = taskString[3];
            if (task.equals("Task")) {
                taskList.add((T) gson.fromJson(jsonList.get(i), Task.class));
            }
            if (task.equals("ScheduleTask")) {
                taskList.add((T) gson.fromJson(jsonList.get(i),
                                               ScheduleTask.class));

            }
            if (task.equals("DeadlineTask")) {
                taskList.add((T) gson.fromJson(jsonList.get(i),
                                               DeadlineTask.class));
            }

        }
        return taskList;
    }
}

	// End of segment: C:\Users\Gable Heng\Desktop\CS2103\ProjectItinerary\src\itinerary\main\JsonConverter.java





	/**
	 * origin: C:\Users\Gable Heng\Desktop\CS2103\ProjectItinerary\src\itinerary\search\Search.java
	 */

public class Search {
	private static final String WORD_FALSE = "false";
	private static final String WORD_TRUE = "true";
	private static final String WORD_AND = " and ";
	private static final String SPECIALCHARACTER_AND = "&";
	private static final String PARSE_DELIMITER = " ";
	private static final String EXCEPT_SPECIALCHARACTER = "[^a-zA-Z0-9]";
	private static final int NUM_HITS = 10;
	private static final int JSON_SECOND = 24;
	private static final int JSON_MINUTE = 20;
	private static final String WILDCARD = "*";
	private static final String QUERY_DELIMITER = PARSE_DELIMITER;
	private static final String DISPLAY_SEARCH = "Searching for: ";
	private static final String ERROR_INDEX = "Error searching through index";
	private static final int SPAN_DISTANCE = 5;
	private static final int LEVENSHTEIN_0 = 0;
	private static final int LEVENSHTEIN_DISTANCE = 2;
	private static final int JSON_HOUROFDAY = 16;
	private static final int JSON_DATE = 12;
	private static final int JSON_MONTH = 8;
	private static final int JSON_YEAR = 4;
	private static final String JSON_DELIMITER = ",|\"|:|\\{|\\}";
	private static final int MIN_LENGTH = 2;
	private static final String LOGGER_IOERROR = ERROR_INDEX;
	private static final String FIELD_ISPRIORITY = "isPriority";
	private static final String FIELD_ISCOMPLETE = "isComplete";
	private static final String FIELD_JSON = "json";
	private static final String FIELD_CATEGORY = "category";
	private static final String FIELD_TEXT = "text";
	private static final String DATE_EPOCH_ERROR = "Error parsing Epoch date";
	private static final String DATE_SIMPLEFORMAT = "dd-M-yyyy hh:mm:ss";
	private static final String DATE_EPOCH = "01-01-1970 00:00:00";
	private static List<String> list;
	private static JsonParser parser;
	private static JsonObject obj;
	private static List<String> typeList;
	ArrayList<String> hitTypeList;
	private static final String ERROR_IO = "Error attempting to search.";
	private static final Logger logger = Logger.getGlobal();
	private static final String FIELD_FROMDATE = "fromDate";
	private static final String FIELD_TODATE = "toDate";
	private static final String FIELD_DEADLINE = "deadline";
	ArrayList<String> hitList;
	StandardAnalyzer analyzer;
	IndexSearcher searcher;
	IndexReader reader;
	IndexWriter writer;
	Document doc;
	Gson gson;

	/**
	 * Search constructor that indexes the current tasklist using a
	 * StandardAnalyzer and the default IndexWriter config.The tasklist must
	 * first be converted to Json. Does not use the default STOP_WORDS_SET
	 * provided by Lucene.
	 * 
	 * @param taskList
	 * @throws SearchException
	 */
	public <T extends Task> Search(List<T> taskList) throws SearchException {
		list = JsonConverter.convertTaskList(taskList);
		parser = new JsonParser();
		typeList = JsonConverter.getTypeList(taskList);
		CharArraySet stopWords = new CharArraySet(5, false);
		analyzer = new StandardAnalyzer(stopWords);
		hitList = new ArrayList<String>();
		Directory index = new RAMDirectory();
		IndexWriterConfig config = new IndexWriterConfig(analyzer);
		createIndex(index, config);
		gson = new Gson();
	}

	/**
	 * Creates a query out of a given SearchTask then searches it. Does this by
	 * building a boolean query out of the not-null fields within SearchTask
	 * 
	 * @param task
	 * @return
	 * @throws SearchException
	 */
	public <T extends Task> List<T> query(SearchTask task)
	        throws SearchException {
		assert task != null;
		BooleanQuery q = new BooleanQuery();

		if (task.isComplete() != null) {
			TermQuery cpQuery = createCompleteQuery(task);
			addMustOccur(q, cpQuery);
		}
		if (task.isPriority() != null) {
			TermQuery cpQuery = createPriorityQuery(task);
			addMustOccur(q, cpQuery);
		}
		if (task.getText() != null) {
			BooleanQuery bQuery = createTextQuery(task);
			addMustOccur(q, bQuery);
		}

		if (task.getCategory() != null) {
			BooleanQuery bQuery = createCategoryQuery(task);
			addMustOccur(q, bQuery);

		}
		if (task.getToDate() != null && task.getFromDate() != null) {
			BooleanQuery bQuery = createDateQuery(task.getToDate(),
			        task.getFromDate());
			addMustOccur(q, bQuery);
		}

		try {
			search(q);
		} catch (IOException e) {
			logger.log(Level.SEVERE, LOGGER_IOERROR, e);
			throw new SearchException(ERROR_IO);
		}
		return JsonConverter.convertJsonList(hitList, hitTypeList);
	}

	/**
	 * creates a query that searches through the category stated in the given
	 * SearchTask
	 * 
	 * @param task
	 * @return
	 */
	private BooleanQuery createCategoryQuery(SearchTask task) {
		BooleanQuery bQuery = createQuery(FIELD_CATEGORY, task.getCategory());
		return bQuery;
	}

	/**
	 * Searches a boolean query, all matches are added to a hitList
	 * 
	 * @param q
	 * @throws SearchException
	 * @throws IOException
	 */
	private void search(BooleanQuery q) throws SearchException, IOException {
		ScoreDoc[] hits = searchQuery(q, searcher);
		addToHitList(hitList, searcher, hits);
	}

	private BooleanQuery createTextQuery(SearchTask task) {
		BooleanQuery bQuery = createQuery(FIELD_TEXT,
		        parseString(task.getText()));
		return bQuery;
	}

	private void addMustOccur(BooleanQuery q, BooleanQuery bQuery) {
		q.add(bQuery, BooleanClause.Occur.MUST);
	}

	private void addMustOccur(BooleanQuery q, TermQuery cpQuery) {
		q.add(cpQuery, BooleanClause.Occur.MUST);
	}

	private TermQuery createPriorityQuery(SearchTask task)
	        throws SearchException {
		TermQuery cpQuery = createCompleteOrPriorityQuery(task.isPriority(),
		        FIELD_ISPRIORITY);
		return cpQuery;
	}

	private TermQuery createCompleteQuery(SearchTask task)
	        throws SearchException {
		TermQuery cpQuery = createCompleteOrPriorityQuery(task.isComplete(),
		        FIELD_ISCOMPLETE);
		return cpQuery;
	}

	/**
	 * Used for basic search, builds a query that only searches through the text
	 * field.
	 * 
	 * @param query
	 * @param field
	 * @return
	 * @throws SearchException
	 */
	public <T extends Task> List<T> query(String query, String field)
	        throws SearchException {
		logger.log(Level.INFO, DISPLAY_SEARCH + query);
		try {

			BooleanQuery q = new BooleanQuery();
			q = createQuery(field, parseString(query));
			search(q);
			reader.close();
		} catch (IOException e) {
			logger.log(Level.SEVERE, ERROR_INDEX, e);
			throw new SearchException(ERROR_IO);
		}
		return JsonConverter.convertJsonList(hitList, hitTypeList);
	}

	/**
	 * All search queries are parsed first to remove any special characters as
	 * StandardAnalyzer doesnt index them properly
	 * 
	 * @param query
	 * @return
	 */
	private String parseString(String query) {
		query = query.toLowerCase().replaceAll(SPECIALCHARACTER_AND, WORD_AND);
		return query.toLowerCase().replaceAll(EXCEPT_SPECIALCHARACTER, PARSE_DELIMITER);
	}


	/**
	 * combines a fuzzyQuery and a WildcardQuery into a BooleanQuery This is for
	 * near-match as well as wildcard search to work at the same time
	 * 
	 * @param field
	 * @param Query
	 * @return
	 */
	private BooleanQuery createQuery(String field, String Query) {
		String[] splitQuery = Query.split(QUERY_DELIMITER);
		BooleanQuery bQuery = new BooleanQuery();
		Query wildQ = getWildCardQuery(field, splitQuery);
		Query fuzzyQ = getFuzzyQuery(field, splitQuery);
		bQuery.add(fuzzyQ, BooleanClause.Occur.SHOULD);
		bQuery.add(wildQ, BooleanClause.Occur.SHOULD);
		return bQuery;
	}
	// End of segment: C:\Users\Gable Heng\Desktop\CS2103\ProjectItinerary\src\itinerary\search\Search.java





	/**
	 * origin: C:\Users\Gable Heng\Desktop\CS2103\ProjectItinerary\src\itinerary\search\Search.java
	 */

	private boolean notMinLength(String[] splitQuery, int i) {
		return splitQuery[i].length() > MIN_LENGTH;
	}

	private FuzzyQuery createFuzzyQuery(String field, String[] splitQuery,
	        int i, int lDistance) {
		FuzzyQuery fuzzyQuery;
		fuzzyQuery = new FuzzyQuery(new Term(field, splitQuery[i]), lDistance);
		return fuzzyQuery;
	}

	public TermQuery createCompleteOrPriorityQuery(boolean setTrue, String field)
	        throws SearchException {
		String isTrue = setTrueOrFalse(setTrue);
		TermQuery termQuery = new TermQuery(new Term(field, isTrue));
		return termQuery;
	}

	private String setTrueOrFalse(boolean setTrue) {
		return setTrue ? WORD_TRUE : WORD_FALSE;
	}

	/**
	 * Since Lucene can only search a single field at a time, this creates a
	 * dateQuery by first searching for tasks with dates in the toDate field
	 * that fall within the specified fromDate and toDate dates inclusive and
	 * then excluding all of those tasks that have fromDate dates from the epoch
	 * to the specified fromDate exclusive.
	 * 
	 * @param toDate
	 * @param fromDate
	 * @return
	 * @throws SearchException
	 */
	public BooleanQuery createDateQuery(Calendar toDate, Calendar fromDate)
	        throws SearchException {
		String sFromDate = DateTools.dateToString(fromDate.getTime(),
		        Resolution.SECOND);
		String sToDate = DateTools.dateToString(toDate.getTime(),
		        Resolution.SECOND);
		BooleanQuery bQuery = new BooleanQuery();
		String epochDate = DateTools.dateToString(getEpoch().getTime(),
		        Resolution.SECOND);
		TermRangeQuery rangeDeadlineQ = TermRangeQuery.newStringRange(
		        FIELD_DEADLINE, sFromDate, sToDate, true, true);
		TermRangeQuery rangeScheduleQ = TermRangeQuery.newStringRange(
		        FIELD_TODATE, sFromDate, sToDate, true, true);
		TermRangeQuery rangeFromScheduleQ = TermRangeQuery.newStringRange(
		        FIELD_FROMDATE, epochDate, sFromDate, false, false);
		bQuery.add(rangeDeadlineQ, BooleanClause.Occur.SHOULD);
		bQuery.add(rangeScheduleQ, BooleanClause.Occur.SHOULD);
		bQuery.add(rangeFromScheduleQ, BooleanClause.Occur.MUST_NOT);
		return bQuery;
	}


	/**
	 * The fields text,category are indexed by TextField in order to tokenize
	 * them. This is to prevent any potential errors arising from using fuzzy
	 * and wildcard queries. Dates are indexed according to Lucene's dateTools,
	 * StringField is used so as to preserve the string literal Priority and
	 * isComplete is also index with StringField in order to preserve the string
	 * literal It also stops working properly if TextField is used.
	 * 
	 * @param writer
	 * @param obj
	 * @throws IOException
	 */
	private void addDoc(IndexWriter writer, JsonObject obj) throws IOException {
		doc = new Document();
		for (Entry<String, JsonElement> entry : obj.entrySet()) {
			String key = entry.getKey();
			JsonElement value = entry.getValue();
			if (key.equals(FIELD_TEXT) || key.equals(FIELD_CATEGORY)) {
				doc.add(new TextField(key, parseString(value.toString()),
				        Field.Store.YES));
			} else if (key.equals(FIELD_TODATE) || key.equals(FIELD_FROMDATE)
			        || key.equals(FIELD_DEADLINE)) {
				Calendar date = convertJsonToDate(value.toString());
				doc.add(new StringField(key, DateTools.dateToString(
				        date.getTime(), Resolution.SECOND), Field.Store.YES));
			} else if (key.equals(FIELD_ISCOMPLETE)
			        || key.equals(FIELD_ISPRIORITY)) {
				doc.add(new StringField(key, value.toString(), Field.Store.YES));
			}
		}
		doc.add(new StringField(FIELD_JSON, obj.toString(), Field.Store.YES));
		writer.addDocument(doc);
	}

	/**
	 * Since DateTools can only be used to convert Date objects,this function
	 * manually converts the JSON Calendar string back into a Calendar object,
	 * which is later converted into a Date object with Calendar.getTime().This
	 * is done because gson is unable to convert it automatically with the
	 * fromJson method.
	 * 
	 * @param obj
	 * @return
	 */
	private Calendar convertJsonToDate(String obj) {
		Calendar date = Calendar.getInstance();
		String[] oString = obj.split(JSON_DELIMITER);
		date.set(Integer.parseInt(oString[JSON_YEAR]),
		        Integer.parseInt(oString[JSON_MONTH]),
		        Integer.parseInt(oString[JSON_DATE]),
		        Integer.parseInt(oString[JSON_HOUROFDAY]),
		        Integer.parseInt(oString[JSON_MINUTE]),
		        Integer.parseInt(oString[JSON_SECOND]));
		return date;
	}

	private void closeWriter(IndexWriter writer) throws IOException {
		writer.close();
	}

	private Calendar getEpoch() throws SearchException {
		SimpleDateFormat sdf = new SimpleDateFormat(DATE_SIMPLEFORMAT);
		String dateInString = DATE_EPOCH;
		Date date;
		Calendar fromDate = Calendar.getInstance();
		try {
			date = sdf.parse(dateInString);
			fromDate.setTime(date);
		} catch (ParseException e) {
			logger.log(Level.SEVERE, DATE_EPOCH_ERROR, e);
			throw new SearchException(ERROR_IO);
		}
		return fromDate;
	}

}

	// End of segment: C:\Users\Gable Heng\Desktop\CS2103\ProjectItinerary\src\itinerary\search\Search.java





	/**
	 * origin: C:\Users\Gable Heng\Desktop\CS2103\ProjectItinerary\src\itinerary\search\SearchException.java
	 */

public class SearchException extends Exception {    

    private static final long serialVersionUID = 7854129702281405376L;
	private static final String DEFAULT_MESSAGE = "An error occurred in search!";
	
	public SearchException (String message) {
		super(message);
	}
	
	public SearchException () {
		super(DEFAULT_MESSAGE);
	}
}

	// End of segment: C:\Users\Gable Heng\Desktop\CS2103\ProjectItinerary\src\itinerary\search\SearchException.java





	/**
	 * origin: C:\Users\Gable Heng\Desktop\CS2103\ProjectItinerary\src\itinerary\search\SearchTask.java
	 */

/**
 * A searchTask contains all fields that a deadlineTask,ScheduleTask and a Task
 * have. Any non-null field in SearchTask is searched with the value of the
 * field as the parameters when a Search.query() is run on it.
 *
 */
public class SearchTask extends Task implements Cloneable {
	private Calendar fromDate;
	private Calendar toDate;
	private Calendar deadline;

	public SearchTask() {
		super(null, null, null, null, null);
	}

	public SearchTask(Integer taskId, String text, String category,
	        Boolean isPriority, Boolean isComplete, Calendar fromDate,
	        Calendar toDate) {
		super(taskId, text, category, isPriority, isComplete);
		this.fromDate = fromDate;
		this.toDate = toDate;
	}

	public Calendar getFromDate() {
		return fromDate;
	}

	public void setFromDate(Calendar fromDate) {
		this.fromDate = fromDate;
	}

	public Calendar getToDate() {
		return toDate;
	}

	public void setToDate(Calendar toDate) {
		this.toDate = toDate;
	}

	// End of segment: C:\Users\Gable Heng\Desktop\CS2103\ProjectItinerary\src\itinerary\search\SearchTask.java





	/**
	 * origin: C:\Users\Gable Heng\Desktop\CS2103\ProjectItinerary\src\test\JsonConverterTest.java
	 */

public class JsonConverterTest {
	public ArrayList<ScheduleTask> convertTestList;
	public ArrayList<String> convertJsonList;
	public Calendar fromDate;
	public Calendar toDate;
	public ScheduleTask task;
	public Gson gson;

	@Before
	public void init() {

		fromDate = Calendar.getInstance();
		toDate = Calendar.getInstance();
		task = new ScheduleTask(1, "testtest", "testcat", true, true, fromDate,
		        toDate);
		gson = new Gson();
	}

	@Test
	public void testConvertTaskList() {
		convertTestList = new ArrayList<ScheduleTask>();
		convertTestList.add(task);
		List<String> jsonList = new ArrayList<String>();
		jsonList = JsonConverter.convertTaskList(convertTestList);
		assertEquals("test ConvertTaskList", gson.toJson(task), jsonList.get(0));
	}

	@Test
	public void testConvertJsonList() {
		convertJsonList = new ArrayList<String>();
		convertJsonList.add(gson.toJson(task));
		ArrayList<String> convertClassList = new ArrayList<String>();
		List<ScheduleTask> taskList = new ArrayList<ScheduleTask>();
		convertClassList.add("class main.itinerary.ScheduleTask");
		taskList = JsonConverter.convertJsonList(convertJsonList,
		        convertClassList);
		assertEquals("test ConvertJsonList", task.getClass(), taskList.get(0)
		        .getClass());
	}

}

	// End of segment: C:\Users\Gable Heng\Desktop\CS2103\ProjectItinerary\src\test\JsonConverterTest.java





